services:

  db:
    image: postgres:15-alpine
    container_name: factory_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - factory_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5


  backend:
    build: 
      context: ./server
      dockerfile: Dockerfile
    container_name: factory_backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      FLASK_ENV: ${FLASK_ENV}
      CORS_ORIGINS: ${CORS_ORIGINS}
      FLASK_APP: manage.py
    ports:
      - "${BACKEND_PORT}:5000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - factory_network
    volumes:
      - ./server/app:/app/app
      - ./server/seeds:/app/seeds
      - ./server/migrations:/app/migrations
      - ./server/manage.py:/app/manage.py
      - ./server/requirements.txt:/app/requirements.txt
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        echo 'Current directory contents:' &&
        ls -la &&
        echo 'Seeds directory contents:' &&
        ls -la seeds/ 2>/dev/null || echo 'Seeds directory not found' &&
        sleep 10 &&
        flask db upgrade &&
        flask seed &&
        python manage.py
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/work-orders"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    container_name: factory_frontend
    ports:
      - "${FRONTEND_PORT}:5173"
    depends_on:
      - backend
    networks:
      - factory_network
    volumes:
      - ./client:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  factory_network:
    driver: bridge